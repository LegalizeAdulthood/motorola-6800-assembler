	OPT	CMOS
*
PORTA	EQU	0
PORTAD	EQU	4
PORTB	EQU	1
TIMER	EQU	8
TIMEC	EQU	9
CR1	EQU	$170A
CR2	EQU	$170B
SEC	EQU	$1700
MIN	EQU	$1702
HOUR	EQU	$1704
DAY	EQU	$1707
MONTH	EQU	$1708
YEAR	EQU	$1709
MONSTR	EQU	$1800
PCMASK	EQU	$1F
NUMBKP	EQU	3
PROMPT	EQU	$A0
LJMP	EQU	$CC
SWIOP	EQU	$83
*
	ORG	$40
*
BKPTBL	EQU	*-3*NUMBKP
IRQ	RMB	3
TIRQ	RMB	3
TIRQW	RMB	3
DTABL	RMB	6
SWIFLG	RMB	1
WORK1	RMB	1
WORK2	RMB	1
ADDRH	RMB	1
ADDRL	RMB	1
WORK3	RMB	1
WORK4	RMB	1
WORK5	RMB	1
WORK6	RMB	1
TEMP	RMB	2
PNCNT	RMB	1
CHKSUM	RMB	1
SREF	RMB	1
LCNT	RMB	1
PCNT1	RMB	1
PCNT0	RMB	1
*
*
	ORG	$1800
*
RESET	LDA	#$F0		SETUP PORT
	STA	PORTAD		FOR KEYPAD
	CLR	PORTA		AND DISPLAY
	CLR	SREF		INITIALIZE
	LDA	#$0F		TAPE SOFTWARE
	STA	LCNT		FOR 2400 BAUD
	LDA	#$12
	STA	PCNT1
	LDA	#$26
	STA	PCNT0
*
VECTOR	FDB	IRQV		SET-UP
	FDB	TIRQV		INTERRUPT
	FDB	TIRQWV		VECTORS
	LDA	#LJMP		IN RAM
	STA	IRQ
	STA	TIRQ
	STA	TIRQW
	LDA	VECTOR
	STA	IRQ+1
	LDA	VECTOR+1
	STA	IRQ+2
	LDA	VECTOR+2
	STA	TIRQ+1
	LDA	VECTOR+3
	STA	TIRQ+2
	LDA	VECTOR+4
	STA	TIRQW+1
	LDA	VECTOR+5
	STA	TIRQW+2
*
	LDX	#SWIFLG
INIT	CLR	0,X		CLEAR
	INCX			WORKING
	CPX	#WORK5		STORAGE
	BLS	INIT
	JSR	SCNBKP		CLEAR
	LDA	#$FF		ALL
REBCLR	STA	0,X		BREAKPOINTS
	INCX
	INCX
	DEC	PNCNT
	BNE	REBCLR
	SWI
*
SWI	EQU	*
	BRSET	0,SWIFLG,SWICHK	FROM RESET?
	BSET	0,SWIFLG	YES
	BRA	GETCMD
SWICHK	JSR	SCNBKP		REMOVE
SWIREP	LDA	0,X		BREAKPOINTS
	BMI	SWINOB
	STA	ADDRH
	LDA	1,X
	STA	ADDRL
	LDA	2,X
	JSR	STORE
SWINOB	INCX			GET NEXT B.P.
	INCX
	INCX
	DEC	PNCNT
	BNE	SWIREP
*
	JSR	LOCSTK		FIND STACK
	LDA	8,X
	SUB	#1		ADJUST
	STA	TEMP+1
	LDA	7,X
	SBC	#0
	STA	TEMP
	STX	WORK6		SAVE STACK LOCATION
	JSR	SCNBKP		SETUP B.P. SCAN
SWITRY	LDA	0,X		ADJUSTED P.C.
	BMI	SWICMP		IN B.P. TABLE?
	CMP	TEMP
	BNE	SWICMP
	LDA	1,X
	CMP	TEMP+1
	BNE	SWICMP		NO, TRY AGAIN
	LDX	WORK6		YES, RESTORE S.P.
	STA	8,X		PUT ADJUSTED P.C.
	LDA	TEMP		INTO STACK
	STA	7,X
	JMP	TRACE		EXECUTE 1 INSTRUCTION
SWICMP	INCX			NEXT B.P.
	INCX
	INCX
	DEC	PNCNT
	BNE	SWITRY		DONE?
	JMP	PCOUNT		YES PRINT P.C.
*
GETCMD	EQU	*
	JSR	CLRTAB
	LDA	#PROMPT		PRINT
	STA	DTABL		'='
	JSR	DISTAB		PROMPT
*
CMDSCN	JSR	KEYSCN		CHECK KEYPAD
	BCC	CMDSCN
	CLRX
	STA	WORK1
RJUMP	LDA	PTABL,X		THIS COMMAND?
	CMP	WORK1
	BEQ	PJUMP		YES
	CMP	#$68
	BEQ	GETCMD
	INCX			NO
	INCX			GO TO
	INCX			NEXT
	INCX			POSSIBLE
	BRA	RJUMP		TRY AGAIN
PJUMP	INCX			GO TO
	JMP	PTABL,X		COMMAND
*
PTABL	FCB	$11
	FCB	LJMP
	FDB	PCOUNT		PROGRAM COUNTER
	FCB	$12
	FCB	LJMP
	FDB	AREG		ACCUMULATOR
	FCB	$14
	FCB	LJMP
	FDB	XREG		INDEX REGISTER
	FCB	$18
	FCB	LJMP
	FDB	CCODE		CONDITION CODE
*
	FCB	$28
	FCB	LJMP
	FDB	PWRDWN		UNUSED
*
	FCB	$32
	FCB	LJMP
	FDB	BPDIS		DISPLAY/SET BP
	FCB	$34
	FCB	LJMP
	FDB	BPCLR		CLEAR BP
	FCB	$38
	FCB	LJMP
	FDB	TRACE		TRACE ONE INSTRUCTION
*
	FCB	$42
	FCB	LJMP
	FDB	DTIME		DISPLAY TIME
	FCB	$44
	FCB	LJMP
	FDB	STIME		SET TIME
	FCB	$48
	FCB	LJMP
	FDB	OFFSET		OFFSET CALCULATION
*
	FCB	$51
	FCB	LJMP
	FDB	PUNCH		PUNCH TAPE
	FCB	$52
	FCB	LJMP
	FDB	TLOAD		LOAD TAPE
	FCB	$54
	FCB	LJMP
	FDB	VERIFY		VERIFY TAPE
*
	FCB	$62
	FCB	LJMP
	FDB	GO		GO
	FCB	$64
	FCB	LJMP
	FDB	MEMEX		MEMORY
	FCB	$68
	FCB	LJMP
	FDB	STACK		STACK

*****************************************
*					*
*	SEARCH FOR STACK POINTER	*
*					*
*	X-REG CONTAINS SP-3		*
*					*
*	A-REG DESTROYED			*
*					*
*****************************************
*
LOCSTK	BSR	LOCST2
STKHI	EQU	*/256
STKLOW	EQU	*-(*/256)*256
	RTS
LOCST2	LDX	#$7F
LOCLOP	LDA	#STKHI
LOCDWN	DECX
	CMP	0,X
	BNE	LOCDWN
	LDA	#STKLOW
	CMP	1,X
	BNE	LOCLOP
	RTS
*
*****************************************
*					*
*	DISPLAY PROGRAM COUNTER		*
*					*
*****************************************
*
PCOUNT	EQU	*
	LDA	#$73		PRINT
	STA	DTABL+4		'PC'
	LDA	#$D1
	STA	DTABL+5
	BSR	LOCSTK		FIND USER PC
	LDA	7,X		HIGH BYTE
	STA	ADDRH
	LDA	8,X		LOW BYTE
	STA	ADDRL		PRINT IT
	JSR	PRTADR
	JMP	CMDSCN
*
*****************************************
*					*
*	ACCUMULATOR EXAMINE/CHANGE	*
*					*
*****************************************
*
AREG	EQU	*
	LDA	#$77		PRINT 'ACCA'
	STA	DTABL
	STA	DTABL+3
	LDA	#$D1
	STA	DTABL+1
	STA	DTABL+2
	BSR	LOCSTK		FIND ACCUM. VALUE
	TXA
	ADD	#5
	CLR	ADDRH		SETUP FOR
	CLR	ADDRL		EXAMINE/CHANGE
	BSET	6,SWIFLG
	JMP	MEMEX3		USING MEMORY ROUTINE
*
*****************************************
*					*
*	INDEX REGISTER EXAMINE/CHANGE	*
*					*
*****************************************
*
XREG	EQU	*
	LDA	#6		PRINT 'ID'
	JSR	CLRTAB
	STA	DTABL+1
	LDA	#$E6
	STA	DTABL+2
	LDA	#$60
	STA	DTABL+3
	BSR	LOCSTK		FIND INDEX
	TXA			REGISTER VALUE
	ADD	#6
	CLR	ADDRH		SETUP FOR
	CLR	ADDRL		EXAMINE/CHANGE
	BSET	6,SWIFLG
	JMP	MEMEX3		USING MEMORY ROUTINE
*
*****************************************
*					*
*	CONDITION CODE			*
*	EXAMINE/CHANGE			*
*					*
*****************************************
*
CCODE	EQU	*
	JSR	CLRTAB
	LDA	#$D1
	STA	DTABL
	LDA	#$D7
	STA	DTABL+1
	LDA	#$E6
	STA	DTABL+2
	LDA	#$F1
	STA	DTABL+3
	BSR	LOCSTK		FIND CONDITION
	TXA			CODES
	ADD	#4
	CLR	ADDRH		SETUP FOR
	STA	ADDRL		EXAMINE/CHANGE
	BSET	6,SWIFLG
	JMP	MEMEX3		USING MEMORY ROUTINE
*
*****************************************
*					*
*	BUILD A BEGINNING		*
*	AND ENDING			*
*	ADDRESS RANGE			*
*					*
*	TEMP,TEMP+1 : BEGINNING		*
*	ADDRH,ADDRL : ENDING		*
*					*
*****************************************
*
BLDRNG	BCLR	4,SWIFLG
	BCLR	3,SWIFLG
	JSR	CLRTAB		PRINT
	LDA	#$F4		'BA'
	STA	DTABL+4
	LDA	#$77
	STA	DTABL+5
	JSR	DISTAB
	JSR	BLDADR		GET SOURCE ADDR.
	BCC	BLDRN1		VALID?
	LDA	ADDRH		YES
	CMP	#PCMASK		TOO BIG?
	BHI	BLDRN2		YES
	STA	TEMP		NO SAVE IT
	LDA	ADDRL
	STA	TEMP+1
	JSR	LOAD		FETCH OPCODE OF INSTR.
	STA	WORK6		SAVE IT
	JSR	CLRTAB
	LDA	#$F1		PRINT 'EA'
	STA	DTABL+4
	LDA	#$77
	STA	DTABL+5
	JSR	DISTAB
	JSR	BLDADR		GET DESTINATION ADDR
	BCC	BLDRN1		VALID?
	LDA	ADDRH		YES
	CMP	#PCMASK		TOO BIG?
	BHI	BLDRN2		YES
	BRA	BLDRET
BLDRN1	BSET	4,SWIFLG	INVALID
	BRA	BLDRET
BLDRN2	BSET	3,SWIFLG	TOO BIG
BLDRET	RTS
*
*****************************************
*					*
*	CALCULATE BRANCH OFFSET		*
*	FOR BIT AND CONDITIONAL		*
*	BRANCHES			*
*					*
*	OPCODE MUST BE AT		*
*	BEGINNING ADDRESS		*
*					*
*	OFFSET WILL BE INSERTED		*
*	INTO BRANCH INSTRUCTION		*
*					*
*****************************************
*
OFFERR	JMP	ERROR
OFFSET	EQU	*
	BSR	BLDRNG
	BRSET	4,SWIFLG,ORET
	BRSET	3,SWIFLG,OFFERR
	LDA	ADDRL		NO FIND APPARRENT
	SUB	TEMP+1		OFFSET
	SUB	#2
	STA	ADDRL
	LDA	ADDRH
	SBC	TEMP
	STA	ADDRH
	LDA	WORK6		CHECK OPCODE
	CMP	#$1F		FOR BIT BRANCH
	BLS	OFFST1
	LDA	ADDRH
	CMP	#$FF		+ OR - OFFSET?
	BEQ	OFFST2
	TSTA			CHECK OFFSET
	BNE	OVRERR		FOR +/- 0
OFFST2	LDA	ADDRL
	CMP	#$FF
	BEQ	OVRERR
	BSR	USE		PRINT IT IF VALID
	JMP	CMDSCN
ORET	JMP	GETCMD
*
USE	JSR	CLRTAB
	LDA	#$D6		PRINT 'USED'
	STA	DTABL
	LDA	#$B5
	STA	DTABL+1
	LDA	#$F1
	STA	DTABL+2
	LDA	#$E6
	STA	DTABL+3
	LDA	ADDRL		PRINT OFFSET
	JSR	PRTDAT
	TAX
	LDA	TEMP+1
	ADD	#1
	STA	ADDRL
	LDA	TEMP
	ADC	#0		PUT INTO
	STA	ADDRH		INSTRUCTION
	TXA
	JSR	STORE
	RTS
*
OFFST1	LDA	ADDRL		ADJUST FOR
	SUB	#1		BIT BRANCH
	STA	ADDRL
	LDA	ADDRH
	SBC	#0
	STA	ADDRH
	CMP	#$FF		NEG OFFSET?
	BEQ	OFFST3		YES
	TSTA			CHECK FOR
	BNE	OVRERR		+/- 0 AND -1
OFFST3	LDA	ADDRL
	CMP	#$FF
	BEQ	OVRERR
	CMP	#$FE
	BEQ	OVRERR
	INC	TEMP+1
	BNE	OFFITS
	INC	TEMP
OFFITS	BSR	USE		PRINT IF VALID
	JMP	CMDSCN
*
OVRERR	LDA	#$D7		PRINT 'OR'
	STA	DTABL+4
	LDA	#$60
	STA	DTABL+5
	JSR	PRTADR
	JMP	CMDSCN
*
*****************************************
*					*
*	DISPLAY/SET BREAKPOINTS		*
*					*
*****************************************
*
BPDIS	EQU	*
	CLR	WORK6
	DEC	WORK6
	JSR	SCNBKP		FIND B.P. TABLE
	STX	WORK2
BPDIS1	CLR	DTABL+4
	LDA	0,X		GET B.P.
	BPL	BPDIS2		VALID?
	LDA	#$F4		NO
	STA	DTABL		PRINT 'BOFF'
	LDA	#$D7
	STA	DTABL+1
	LDA	#$71
	STA	DTABL+2
	STA	DTABL+3
	BRA	BPDIS4
BPDIS2	STA	ADDRH		PRINT B.P.
	LDA	1,X
	STA	ADDRL
	JSR	PRTADR
BPDIS4	INC	WORK6		PRINT B.P. #
	LDX	WORK6
	LDA	CTABL,X
	STA	DTABL+5
	JSR	DISTAB
	JSR	BLDADR		NEW B.P.
	LDX	WORK2
	BCS	BPDIS7		YES
	CMP	#$10		NO,ESC?
	BEQ	BPRET		GET OUT
	CMP	#$11		ENTER?
	BEQ	BPDIS5		GET NEXT B.P.
BPDIS7	LDA	ADDRH		TOO BIG?
	CMP	#PCMASK
	BHI	BPERR		YES
	STA	0,X		NO,STORE NEW B.P.
	LDA	ADDRL
	STA	1,X
BPDIS5	INCX			GET NEXT B.P.
	INCX
	INCX
	STX	WORK2
	DEC	PNCNT
	BNE	BPDIS1		DONE?
	BRA	BPDIS		YES START OVER
BPRET	JMP	GETCMD
*
BPERR	JMP	ERROR
*
*****************************************
*					*
*	BREAKPOINT CLEAR		*
*					*
*	TYPE # FOR SINGLE		*
*	CLEAR AND ENT FOR ALL		*
*					*
*****************************************
*
BPCLR	EQU	*
	JSR	CLRTAB		PRINT 'BCLR'
	LDA	#$F4
	STA	DTABL
	LDA	#$D1
	STA	DTABL+1
	LDA	#$D0
	STA	DTABL+2
	LDA	#$60
	STA	DTABL+3
	JSR	DISTAB
	JSR	SCNBKP		FIND B.P. TABLE
	STX	WORK2
	JSR	GETNYB
	BCS	BPCLR1		ENTER?
	CMP	#$11
	BNE	BPCRET		NO
	LDA	#$FF		YES,CLEAR ALL
	LDX	WORK2
BPCLR2	STA	0,X
	INCX
	INCX
	INCX
	DEC	PNCNT
	BNE	BPCLR2
	BRA	BPCRET
BPCLR1	CMP	#NUMBKP		VALID B.P. #?
	BHS	BPERR		NO
	TAX			YES
	LDA	CTABL,X		PRINT B.P. #
	STA	DTABL+5
	CLRA			FIND IT
	SUB	#3
BPCLR3	ADD	#3
	DECX
	BPL	BPCLR3
	STA	WORK6
	JSR	DISTAB		PRINT B.P.
	JSR	CHRIN
	CMP	#$11		CLEAR IT?
	BNE	BPCRET		NO
	LDA	#BKPTBL		YES
	ADD	WORK6
	TAX
	LDA	#$FF
	STA	0,X
BPCRET	JMP	GETCMD
*
*****************************************
*					*
*	TRACE ONE INSTRUCTION		*
*					*
*	TIMER INTERRUPT IS		*
*	USED				*
*					*
*****************************************
*
TRACE	EQU	*
	JSR	LOCSTK		FIND S.P.
	LDA	4,X
	AND	#8
	STA	WORK6
	LDA	7,X
	STA	ADDRH
	LDA	8,X
	STA	ADDRL
	JSR	LOAD		GET OPCODE
	CMP	#$83		SWI?
	BNE	TRACE3
	LDA	ADDRL		YES
	ADD	#1		INC PC
	STA	8,X
	LDA	ADDRH
	ADC	#0
	STA	7,X
	JMP	PCOUNT
TRACE3	CMP	#$9B		SEI?
	BNE	TRACE2
	LDA	4,X		YES
	ORA	#8		SET IT IN
	STA	4,X		STACK
	LDA	ADDRL
	ADD	#1
	STA	8,X
	LDA	ADDRH
	ADC	#0
	STA	7,X
	JMP	PCOUNT
TRACE2	CMP	#$9A		CLI?
	BNE	TRACE1
	CLR	WORK6		YES,CLEAR IT ON STACK
TRACE1	LDA	4,X		GET COND. CODE
	AND	#$F7		CLEAR IRQ BIT
	STA	4,X		RETURN TO STACK
	LDA	#16
	STA	TIMER
	LDA	#8
	STA	TIMEC
	RTI			EXECUTE
*
*****************************************
*					*
*	SET CURRENT TIME		*
*	USING MC146818			*
*					*
*	12-HOUR FORMAT			*
*					*
*****************************************
*
STIME	EQU	*
	JSR	CLRTAB
	LDA	#$77		AM BY DEFAULT
	STA	DTABL+5
	CLR	ADDRL
	CLR	ADDRH
STIME2	JSR	PRTADR
	JSR	GETNYB		GET INPUT
	BCS	STIME1
	CMP	#$10		ESC?
	BEQ	STMRET
	CMP	#$11		ENT?
	BEQ	STIME4
	CMP	#$17		P?
	BNE	STIME2
	LDA	#$73		YES,
	STA	DTABL+5		PRINT P
	BRA	STIME2
STIME1	CMP	#9		GT 9?
	BHI	STERR
	LDX	#4		SHIFT IN NEW
STIME3	LSL	ADDRL		INPUT
	ROL	ADDRH
	DECX
	BNE	STIME3
	ORA	ADDRL
	STA	ADDRL
	BRA	STIME2
STIME4	LDA	ADDRH		HOURS GT 12?
	CMP	#$12
	BHI	STERR
	TSTA			HOURS EQ 0?
	BEQ	STERR
	LDA	ADDRL		MIN? GT 59?
	CMP	#$59
	BHI	STERR
	LDA	#$80		PUT IN
	STA	CR2		SET TIME MODE
	CLRA
	STA	CR1
	BRSET	2,DTABL+5,STIME5 PM?
	BSET	7,ADDRH		YES
STIME5	LDA	ADDRL		PUT TIME INTO
	STA	MIN		MC146818
	LDA	ADDRH
	STA	HOUR
	CLRA
	STA	CR2		ALLOW TO RUN
	STA	SEC		CLR SECONDS
STMRET	JMP	GETCMD
*
STERR	JMP	ERROR
*
*****************************************
*					*
*	WAIT FOR THE END		*
*	OF UPDATE CYCLE			*
*					*
*****************************************
*
VALID	JSR	KEYSCN
	BCS	VALRET
	LDA	CR1		IS UIP LOW?
	AND	#$80
	BEQ	VALID		YES,WAIT UNTIL HIGH
VALID2	JSR	KEYSCN
	BCS	VALRET
	LDA	CR1		UIP MADE NEG TRANSITION
	AND	#$80
	BNE	VALID2
VALRET	RTS
*
*****************************************
*					*
*	DISPLAY CURRENT TIME		*
*	FROM MC146818			*
*					*
*	USES 12-HOUR FORMAT		*
*					*
*****************************************
*
DTIME	EQU	*
	JSR	CLRTAB
	LDA	#$77
	STA	DTABL+5
	BSR	VALID		UPDATE OVER
	BCC	DTIME2
	CLRX
	JMP	RJUMP
DTIME2	LDA	HOUR
	STA	ADDRH
	BRCLR	7,ADDRH,DTIME1	PM?
	BCLR	7,ADDRH
	LDA	#$73		PRINT IT
	STA	DTABL+5
DTIME1	LDA	MIN
	STA	ADDRL
	JSR	PRTADR		PRINT TIME
	BRA	DTIME
*
*****************************************
*					*
*	PUNCH TAPE			*
*					*
*	LAST ADDRESS WILL		*
*	REMAIN UNTIL PUNCH		*
*	IS COMPLETE			*
*					*
*	2400 BAUD IS DEFAULT		*
*					*
*****************************************
*
PUNERR	JMP	ERROR
*
PUNCH	EQU	*
	JSR	BLDRNG		BUILD RANGE
	BRSET	4,SWIFLG,PUNRET	VALID?
	BRSET	3,SWIFLG,PUNERR	VALID?
	LDX	TEMP		SWAP ADDRESSES
	STA	TEMP
	STX	ADDRH
	LDA	ADDRL
	LDX	TEMP+1
	STX	ADDRL		ADJUST
	INCA			ENDING
	BNE	PUN3		ADDRESS
	INC	TEMP
PUN3	STA	TEMP+1
	BSR	PUNLDR		PUNCH LEADER
	LDA	#$B3		PUNCH BOT
	BSR	PUNBYT
	CLR	CHKSUM		INITIALIZE CHECKSUM
	LDA	TEMP		PUNCH
	BSR	PUNIT		ENDING ADDRESS
	LDA	ADDRL
	BSR	PUNIT
PUN5	JSR	LOAD		GET BYTE FROM MEMORY
	BSR	PUNIT		PUNCH IT
	INC	ADDRL
	BNE	PUN4
	INC	ADDRH
PUN4	LDA	TEMP		FINISHED?
	CMP	ADDRH
	BNE	PUN5
	LDA	TEMP+1
	CMP	ADDRL
	BNE	PUN5
	LDA	CHKSUM		YES, PUNCH
	BSR	PUNBYT		CHECKSUM
PUNRET	JMP	GETCMD
*
PUNIT	STA	WORK5
	BSR	PUNBYT		PUNCH BYTE
	LDA	WORK5		AND UPDATE
	ADD	CHKSUM		CHECKSUM
	STA	CHKSUM
	RTS
*
PUNLDR	LDA	#$3F		PUNCH 16K
	STA	WORK1		ZEROS
	LDA	#$FF
	STA	WORK2
PUNLD1	BSR	COMO
	BSR	NOCO
	DEC	WORK2
	BNE	PUNLD1
	DEC	WORK1
	BNE PUNLD1
	RTS
*
PUNBYT	LDX	#8		PUNCH
	BSR	COMO		SYNC
	BSR	COMO		START
PUNBY1	BSR	COMO		SYNC
	RORA
	BCC	PUNBY2		1 OR 0?
	BSR	COMO		1
	BRA	PUNBY3
PUNBY2	BSR	NOCO		0
PUNBY3	DECX			ALL
	BNE	PUNBY1		DONE?
	BSR	COMO		YES,SYNC
	BSR	NOCO		STOP BIT
	RTS
*
COMO	STX	WORK3		MAKE A TRANSITION
	BRCLR	6,PORTA,COMO1
	BCLR	6,PORTA
	BRA	DELAY		PAUSE
COMO1	BSET	6,PORTA
DELAY	LDX	PCNT1
COMO2	DECX
	BNE	COMO2
	LDX	WORK3
	RTS
*
NOCO	STX	WORK3		NO TRANSITION
	LDX	PCNT0		DOUBLE DELAY
NOCO1	DECX
	BNE	NOCO1
	LDX	WORK3
	RTS
*
*****************************************
*					*
*	LOAD TAPE OR			*
*	COMPARE TAPE			*
*					*
*****************************************
*
TLOAD	EQU	*
	BCLR	5,SWIFLG
	JSR	CLRDIS
LOAD0	LDA	#$FF		LOAD 256
LOAD1	BSR	EDGE		CONSECUTIVE
	BCS	LOAD0		ZEROS
	DECA
	BNE	LOAD1
LOAD2	BSR	LOADBY
	CMP	#$B3		BOT?
	BNE	LOAD2
*
	CLR	CHKSUM		YES, INIT CHECKSUM
	JSR	LOADIT		GET ENDING
	STA	TEMP		ADDRESS
	BSR	LOADIT
	STA	TEMP+1
	BSR	LOADIT		GET BEGINNING
	STA	ADDRH		ADDRESS
	BSR	LOADIT
	STA	ADDRL
*
LOAD4	BSR	LOADIT		GET BYTE
	BRCLR	5,SWIFLG,LOAD5	COMPARE?
	STA	WORK6		YES, IS IT
	JSR	LOAD		SAME?
	CMP	WORK6
	BNE	DISADR		NO
	BRA	LOAD6		YES
LOAD5	JSR	STORE		NOT COMPARE, SAVE IT
	BCS	DISADR
LOAD6	INC	ADDRL		INC ADDRESS
	BNE	LOAD3
	INC	ADDRH
LOAD3	LDA	TEMP		FINISHED?
	CMP	ADDRH
	BNE	LOAD4
	LDA	TEMP+1
	CMP	ADDRL
	BNE	LOAD4
	BSR	LOADBY		YES,GET
	CMP	CHKSUM		CHECKSUM
	BNE	LDERR		NOT SAME -- ERROR
	JMP	GETCMD
*
LDERR	JMP	ERROR
*
DISADR	JSR	PRTADR		DISPLAY ADDRESS
	JMP	CMDSCN		FOR ERROR
*
LOADBY	STX	WORK1
	LDX	#8
	BSR	EDGE		SET START
LODBY1	BSR	EDGE		BIT
	BCC	LODBY1
	BSR	EDGE		SYNC
LODBY2	DECX
	BMI	LODBYR		FINISHED?
	LSRA			NO, SHIFT
	BSR	EDGE		GET BIT
	BCC	LODBY3		1 OR 0?
	BSR	EDGE		IF 1 GET CLEAR NEXT
	ORA	#$80		TRANSITION
	BRA	LODBY2		SHIFT IN 1
LODBY3	ORA	#0		SHIFT IN 0
	BRA	LODBY2
LODBYR	LDX	WORK1
	RTS
*
EDGE	STA	WORK2
	STX	WORK3
	CLRX
EDGE1	INCX			LOOP TILL
	CLRA			TRANSITION
	BIL	EDGE2
	INCA
EDGE2	CMP	SREF
	BEQ	EDGE1
	STA	SREF		UPDATE LEVEL
	TXA			STATUS
	SUB	LCNT		SET CARRY FOR
	LDA	WORK2		1 OR 0
	LDX	WORK3
	RTS
*
LOADIT	BSR	LOADBY		GET BYTE
	STA	WORK4		AND UPDATE
	ADD	CHKSUM		CHECKSUM
	STA	CHKSUM
	LDA	WORK4
	RTS
*
*****************************************
*					*
*	VERIFY TAPE			*
*					*
*****************************************
*
VERIFY	EQU	*
	BSET	5,SWIFLG
	JSR	CLRDIS
	JMP	LOAD0
*
GOERR	JMP	ERROR
*
GOBACK	JMP	GETCMD
*
GO	EQU	*
	JSR	LOCSTK
	LDA	8,X
	STA	ADDRL
	LDA	7,X
	STA	ADDRH
	BCS	GOON		ADDR VALID?
	CMP	#$10
	BEQ	GOBACK
	CMP	#$11
	BNE	GOERR
GOON	JSR	LOCSTK		YES PUT IT
	LDA	ADDRH		IN STACK
	CMP	#PCMASK		TO BIG?
	BHI	GOERR		YES
	STA	7,X
	LDA	ADDRL
	STA	8,X
CONT	BSR	SCNBKP		FIND B.P. TABLE
GOINSB	LDA	0,X		INSERT B.P.'S
	BMI	GONOB		VALID?
	STA	ADDRH		YES
	LDA	1,X
	STA	ADDRL
	JSR	LOAD		SAVE OPCODE
	STA	2,X
	LDA	#SWIOP
	JSR	STORE
GONOB	INCX			GET NEXT B.P.
	INCX
	INCX
	DEC	PNCNT
	BNE	GOINSB		DONE?
	RTI			YES
*
SCNBKP	EQU	*
	LDA	#NUMBKP
	STA	PNCNT
	LDX	#BKPTBL
	RTS
*
*****************************************
*					*
*	DISPLAY STACK POINTER		*
*					*
*****************************************
*
STACK	EQU	*
	LDA	#$85		PRINT
	STA	DTABL+4		'SP'
	LDA	#$73
	STA	DTABL+5
	CLRA
	CLRX
	JSR	PRTBYT
	JSR	LOCSTK		FIND USER
	TXA			STACK POINTER
	ADD	#3
	LDX	#2
	JSR	PRTBYT		PRINT IT
	JMP	CMDSCN
*
*****************************************
*					*
*	CLEAR DISPLAY TABLE		*
*					*
*	X REG DESTROYED			*
*					*
*****************************************
*
CLRTAB	LDX	#5
CLRLOC	CLR	DTABL,X		CLEAR SIX
	DECX			LOCATIONS IN
	BPL	CLRLOC		DISPLAY TABLE
	RTS
*
*****************************************
*					*
*	DISPLAY TABLE CONTENTS		*
*					*
*	A,X REGISTERS DESTROYED		*
*					*
*****************************************
*
DISTAB	LDX	#5
DISCHR	LDA	DTABL,X		LOAD DISPLAY
	BSR	DISPLY		TABLE INTO
	DECX			145000
	BPL	DISCHR
	RTS
*
*****************************************
*					*
*	BLANK DISPLAY			*
*					*
*	A,X REGISTERS DESTROYED		*
*					*
*****************************************
*
CLRDIS	BSR	CLRTAB		BLANK
	BSR	DISTAB		DISPLAY
	RTS
*
*****************************************
*					*
*	SHIFT ONE CHARACTER INTO	*
*	DISPLAY				*
*					*
*	A REGISTER DESTROYED		*
*					*
*****************************************
*
DISPLY	STX	WORK1		SAVE INDEX
	BCLR	6,PORTA		CLEAR DATA
	LDX	#8
DIS1	LSLA			SET UP
	BCC	DIS2		BIT OF
	BSET	6,PORTA		ACCUMULATOR
DIS2	BSET	7,PORTA		CLOCK
	BCLR	7,PORTA		IT
	BCLR	6,PORTA		CLEAR DATA
	DECX			COMPLETE?
	BNE	DIS1		NO
	LDX	WORK1		RESTORE INDEX
	RTS
*
*****************************************
*					*
*	KEYPAD SCAN			*
*					*
*	X REGISTER DESTROYED		*
*					*
*	A REGISTER CONTAINS VALUE	*
*					*
*	CARRY SET IF VALID OUTPUT	*
*					*
*****************************************
*
KEYSCN	CLC
	CLRA
	LDX	#6		SETUP
KEY1	ADD	#$10		ROW
	STA	PORTA
	BSR	COLUMN		CHECK COLUMNS
	BCS	KEY2		IF VALID GET OUT
	DECX			ELSE TRY
	BNE	KEY1		NEXT ROW
KEY2	RTS
*
*****************************************
*					*
*	CHECK FOR KEY CLOSURE		*
*	WITHIN COLUMN AND DEBOUNCE	*
*					*
*	A REGISTER CONTAINS VALUE	*
*					*
*	CARRY SET IF VALID OUTPUT	*
*					*
*****************************************
*
COLUMN	LDA	PORTA		READ KEYPAD
	STA	WORK1		STORE IT
	BIT	#$0F		KEY CLOSED?
	BEQ	COLRET		NO GET OUT
	BSR	DBOUNC		ELSE DEBOUNCE
	LDA	PORTA		RE-READ KEYPAD
	CMP	WORK1		SAME KEY CLOSED?
	BNE	COLRET		NO GET OUT
	SEC			SET FLAG FOR VALID
COL1	LDA	PORTA		KEY
	BIT	#$0F		RELEAED?
	BNE	COL1		NO TRY AGAIN
	BSR	DBOUNC		YES DEBOUNCE
	LDA	PORTA		STILL
	BIT	#$0F		RELEASED?
	BNE	COL1		NO TRY AGAIN
	LDA	WORK1		RETURN CHAR IN A-REG
COLRET	RTS			YES GO HOME
*
*****************************************
*					*
*	PAUSE FOR 3075 CYCLES		*
*					*
*	A REGISTER DESTROYED		*
*					*
*****************************************
*
DBOUNC	LDA	#$FF		PAUSE
DLOOP	BRN	*		256X12
	BRN	*		CYCLES
	DECA			OR AT
	BNE	DLOOP		LEAST
	RTS			3.7 MS
*
*****************************************
*					*
*	INPUT ONE CHARACTER		*
*					*
*	A REGISTER CONTAINS HEX VALUE	*
*					*
*	X REGISTER CONTAINS HEX VALUE	*
*					*
*****************************************
*
CHRIN	EQU	*
	JSR	KEYSCN		GET KEY
	BCC	CHRIN		IF NOT VALID RETRY
	CLRX
CHRIN1	CMP	STABL,X		CONVERT
	BEQ	CHRIN2		TO HEX
	INCX
	BRA	CHRIN1
CHRIN2	TXA			IF CANCEL
	RTS
*
*****************************************
*					*
*	CONVERSION TABLE FOR KEYPAD	*
*	TO HEX NUMBER			*
*					*
*****************************************
*
STABL	FCB	$11		0
	FCB	$21		1
	FCB	$22		2
	FCB	$24		3
	FCB	$31		4
	FCB	$32		5
	FCB	$34		6
	FCB	$41		7
	FCB	$42		8
	FCB	$44		9
	FCB	$48		A
	FCB	$38		B
	FCB	$28		C
	FCB	$18		D
	FCB	$14		E
	FCB	$12		F
	FCB	$61		CANCEL COMMAND
	FCB	$58		ENTER COMMAND
	FCB	$68		STACK POINTER
	FCB	$64		MEMORY
	FCB	$62		GO
	FCB	$54		VERIFY TAPE
	FCB	$52		LOAD TAPE
	FCB	$51		PUNCH TAPE
*
*****************************************
*					*
*	HEX TO MUX DISPLAY		*
*	CONVERSION TABLE		*
*					*
*****************************************
*
CTABL	FCB	$D7		0
	FCB	6		1
	FCB	$E3		2
	FCB	$A7		3
	FCB	$36		4
	FCB	$B5		5
	FCB	$F5		6
	FCB	7		7
	FCB	$F7		8
	FCB	$B7		9
	FCB	$77		A
	FCB	$F4		B
	FCB	$D1		C
	FCB	$E6		D
	FCB	$F1		E
	FCB	$71		F
*
ERROR	EQU	*
	JSR	CLRTAB
	LDA	#$F1
	STA	DTABL+1
	LDA	#$60
	STA	DTABL+2
	STA	DTABL+3
	JSR	DISTAB
	JMP	CMDSCN
*
*****************************************
*					*
*	MEMORY EXAMINE/CHANGE		*
*					*
*****************************************
*
MEMEX	JSR	GETADR		BUILD ADDRESS
	CMP	#$10
	BEQ	MEMEX4
MEMEX3	STA	WORK1
	LDA	ADDRH
	CMP	#PCMASK
	BLS	MEMOK
	JMP	ERROR
MEMOK	LDA	WORK1
	JSR	LOAD		LOAD DATA
	JSR	PRTDAT		PRINT IT
	JSR	GETNYB		GET NEW NIBBLE
	CMP	#$10
	BEQ	MEMEX4
	CMP	#$11
	BEQ	ADRINC
	CMP	#$13
	BEQ	ADRDEC
	BCC	CMDMDL		IF VALID
MEMEX1	JSR	PRTDAT		PRINT IT
	JSR	GETBY2		SHIFT IN NEXT
	BCS	MEMEX1		IF VALID TRY AGAIN
*
CMDMDL	CMP	#$11		ENTER?
	BNE	MEMEX2		NO
	LDA	WORK2		RESTORE ACCA
	JSR	STORE		YES STORE IT
	BCS	MEMEX3		STORE VALID?
ADRINC	BRSET	6,SWIFLG,MEMEX4
	INC	ADDRL		YES GO TO
	BNE	MEMEX5		NEXT
	INC	ADDRH
MEMEX5	JSR	PRTADR		PRINT IT
	BRA	MEMEX3		REPEAT
MEMEX2	CMP	#$13		MEMORY?
	BNE	MEMEX4		NO
	LDA	WORK2
	BSR	STORE
	BCS	MEMEX3
ADRDEC	BRSET	6,SWIFLG,MEMEX4
	TST	ADDRL		YES THEN
	BNE	CMDMB2		GET PREVIOUS
	DEC	ADDRH		ADDRESS
CMDMB2	DEC	ADDRL
	JSR	PRTADR		PRINT IT
	BRA	MEMEX3		REPEAT
MEMEX4	BCLR	6,SWIFLG	INVALID CHAR
	JMP	GETCMD
*
*****************************************
*					*
*	LOAD BYTE AT ADDRH,ADDRL	*
*	INTO ACCUMULATOR		*
*					*
*****************************************
*
LOAD	STX	WORK1		SETUP
	LDX	#$C6		ROUTINE
LDSTCM	STX	WORK2		TO DO
	LDX	#$81		TWO BYTE
	STX	WORK3		LOAD
	JSR	WORK2
	LDX	WORK1
	RTS
*
*****************************************
*					*
*	STORE ACCUMULATOR INTO		*
*	BYTE AT ADDRH,ADDRL		*
*					*
*****************************************
*
STORE	STX	WORK1
	LDX	#$C7		SETUP
	BSR	LDSTCM		ROUTINE
	STA	WORK4		TO DO
	JSR	LOAD		TWO BYTE
	CMP	WORK4		STORE
	BEQ	STRTS
	SEC
STRTS	LDX	WORK1
	RTS
*
*****************************************
*					*
*	BUILD A BYTE			*
*					*
*	A REGISTER CONTAINS BYTE	*
*					*
*****************************************
*
GETBY2	STA	WORK2
	BSR	GETNYB
	BCC	GETBRT
	ASL	WORK2
	ASL	WORK2
	ASL	WORK2
	ASL	WORK2
	ORA	WORK2
	SEC
GETBRT	RTS
*
*****************************************
*					*
*	GET ONE CHARACTER AND		*
*	CHECK FOR VALID HEX NUMBER	*
*					*
*	A REGISTER CONTAINS OUTPUT	*
*					*
*	X REGISTER DESTROYED		*
*					*
*	CARRY SET IF VALID HEX NUMBER	*
*					*
*****************************************
*
GETNYB	JSR	CHRIN		GET CHARACTER
	CLC
	CMP	#$0F		VALID HEX?
	BHI	GETRET		NO
	SEC			YES
GETRET	RTS
*
*****************************************
*					*
*	BUILD ADDRESS			*
*					*
*	A,X REGISTERS DESTROYED		*
*					*
*	ADDRH,ADDRL CONTAIN ADDRESS	*
*					*
*	CARRY SET IF NEW ADDRESS	*
*					*
*****************************************
*
GETADR	JSR	CLRTAB		BLANK DISPLAY
	BSR	PRTADR
BLDADR	BSR	GETNYB		GET CHARACTER
	BCS	GETAD1		VALID HEX
	CMP	#$10
	BEQ	GETRTS
	CMP	#$11		NO ENTER?
	BEQ	GETRTS		NO TRY AGAIN
	BRA	GETADR
GETAD1	CLR	ADDRH		INIT HIGH ADDRESS
	STA	ADDRL		PUT CHAR AWAY
	BSR	PRTADR		PRINT NEW ADDRESS
GETALP	BSR	GETNYB		GET ANOTHER CHAR
	BCC	GETARG		VALID?
	ASLA			YES
	ASLA			SHIFT IT IN
	ASLA
	ASLA
	LDX	#4
GETASF	ASLA
	ROL	ADDRL
	ROL	ADDRH
	DECX
	BNE	GETASF
	BSR	PRTADR		PRINT NEW ADDR
	BRA	GETALP		GET ANOTHER CHAR
GETARG	CMP	#$10
	BEQ	GETRTS
	CMP	#$11		IS ENTER?
	BNE	GETALP		NO TRY AGAIN
	SEC			YES SET FLAG
GETRTS	RTS
*
*****************************************
*					*
*	PRINT ONE BYTE INTO PAIR	*
*	OF DISPLAY DIGITS		*
*					*
*	A REGISTER CONTAINS BYTE	*
*					*
*	X REGISTER POINTS TO 1ST	*
*	DIGIT OF PAIR			*
*					*
*****************************************
*
PRTDAT	LDX	#4		PRINT IN LAST TWO DIGIT
PRTBYT	STX	WORK1
	STA	WORK4
	LSRA
	LSRA
	LSRA
	LSRA
	TAX	
	LDA	CTABL,X
	LDX	WORK1
	STA	DTABL,X
	LDA	WORK4
	AND	#$0F
	TAX
	LDA	CTABL,X
	LDX	WORK1
	STA	DTABL+1,X
	JSR	DISTAB
	LDA	WORK4
	RTS
*
*****************************************
*					*
*	PRINT ADDRESS ADDRH,ADDRL	*
*					*
*	X REGISTER DESTROYED		*
*					*
*****************************************
*
PRTADR	STA	WORK5
	STX	WORK3
	LDA	ADDRH
	CLRX
	BSR	PRTBYT
	LDA	ADDRL
	LDX	#2
	BSR	PRTBYT
	LDA	WORK5
	LDX	WORK3
	RTS
*
TIRQWV	RTI
*
IRQV	RTI
	RTI
*
TIRQV	EQU	*
	LDA	#$40
	STA	TIMEC
	JSR	LOCSTK
	LDA	4,X
	ORA	WORK6
	STA	4,X
	JMP	PCOUNT
*
PWRDWN	JSR	CLRDIS
	STOP
*
	ORG	$1FF6
*
	FDB	TIRQW
	FDB	TIRQ
	FDB	IRQ
	FDB	SWI
	FDB	RESET
*
	END
